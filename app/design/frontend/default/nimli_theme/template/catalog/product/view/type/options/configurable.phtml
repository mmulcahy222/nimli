
<?php

$_product = $this->getProduct();
$_attributes = Mage::helper('core')->decorateArray($this->getAllowAttributes());

?>
<?php

if ($_product->isSaleable() && count($_attributes)):

?>
    
    <?php

    foreach ($_attributes as $_attribute):

?>
<div style="display: none">
        <dt><label><?php

        echo $_attribute->getLabel()

?><span class="required">&nbsp;*</span></label></dt>
        <dd<?php

        if ($_attribute->decoratedIsLast)
        {

?> class="list_of_options"<?php

        }

?>>
          <select name="super_attribute[<?php

        echo $_attribute->getAttributeId()

?>]" id="attribute<?php

        echo $_attribute->getAttributeId()

?>" class="required-entry super-attribute-select">
            <option><?php

        echo $this->__('Choose an Option...')

?></option>
          </select>
        </dd>
</div>


    <?php

        $_productAttribute = $_attribute->getProductAttribute();
        $_option_vals = array();


        //
        // The following is an array of attribute codes.
        // List here all attributes that will potentially
        // have associated color codes
        //
        $color_attributes = array('color_item');
        $boxed_attributes = array('size', 'scent');


        //
        //
        //        ALL COMMENTED CODE IS THE OLD LEGACY CODE OF COLORS SHOWING UP 
        //        IN COLOR ITEM ATTRIBUTE. IT HAS SINCE BEEN CHANGED!!!
        //
        //
        /*
        
        if (in_array($_productAttribute->getAttributeCode(), $color_attributes))
        {
            $current_attribute_name = ucwords($_productAttribute->getAttributeCode());
            $attribute_id = $_attribute->getAttributeId();
            echo '<dl class="list_of_options"><div >
<span><b>Select Color:</b> <span id="current_' . $attribute_id . '"' .
                'style="font-weight: 800; color: red">-----</span> </span>';
            echo '<div class="all_colors">';

            $_colors = array();

            //
            // Pull in all potential options for this attribute
            //
            $_collection = Mage::getResourceModel('eav/entity_attribute_option_collection')->
                setStoreFilter(0)->setAttributeFilter($_productAttribute->getId())->load();

            foreach ($_collection->toOptionArray() as $_cur_option)
            {
                $_option_vals[$_cur_option['value']] = array('id' => $_cur_option['value'],
                    'internal_label' => $_cur_option['label']);
            }

            //
            // Get associated products
            //
            $temp = new Mage_Catalog_Block_Product_View_Type_Configurable();
            $_assProducts = Mage::helper('core')->decorateArray($temp->getAllowProducts());

            foreach ($_assProducts as $_assProduct)
            {
                $_option_id = $_assProduct->getData($_productAttribute->getAttributeCode());

                //
                // Keep track of the admisn/backend label for this option id
                //
                if (isset($_option_vals[$_option_id]['internal_label']))
                {
                    $_option_vals[$_option_id]['label'] = $_assProduct->getAttributeText($_productAttribute->
                        getAttributeCode());
                    $_option_vals[$_option_id]['path'] = $_assProduct->getThumbnailUrl();
                    array_push($_colors, $_option_id);
                }
            }

            $_color_swatch = array_unique($_colors);

            /////THIS IS THE CODE THAT CHOOSES THE DEFAULT COLOR
            echo '<script type="text/javascript">jQuery(window).load(function(){set_attribute_selected_value(' .
                $_attribute->getAttributeId() . ', ' . $_color_swatch[0] . ');});</script>';


            foreach ($_color_swatch as $_inner_option_id)
            {
                preg_match_all('/((#?[A-Za-z0-9]+))/', $_option_vals[$_inner_option_id]['internal_label'],
                    $matches);
                $thumbnail_path = $_option_vals[$_inner_option_id]['path'];
                if (count($matches[0]) > 0)
                {

                    //
                    // Found a color definition in the admin label
                    //
                    $color_value = $matches[1][count($matches[0]) - 1];


                    echo '
									<div class="after_load" onmousedown="set_attribute_selected_value(' . $_attribute->
                        getAttributeId() . ', ' . $_inner_option_id . ');" style=\'cursor:pointer; float:left; margin-left: 8px; height: 32px; width: 32px;");\' title="' .
                        $_option_vals[$_inner_option_id]['label'] . '">
									<img style="height: 32px; width: 32px;" src="' . $thumbnail_path .
                        '"></img>
									</div>
									';

                }

            }

            echo '</div></dl>';

        }


        //?IF IT'S SIZE OR OTHER CONFIGURABLE ATTRIBUTE
        else
            if ($_productAttribute->getAttributeCode() != 'color_item')
            {
        */
                $current_attribute_name = ucwords($_productAttribute->getAttributeCode());
                if($current_attribute_name == 'Color_item')
                {
                    $current_attribute_name = 'Color';
                }
                $attribute_id = $_attribute->getAttributeId();
                echo '<div class="list_of_options">';
                echo '<div style="padding: 7px 0px">
<span><b>Select ' . $current_attribute_name . ':</b> <span id="current_' . $attribute_id .
                    '"' . 'style="font-weight: 800; color: red">-----</span> </span></div>';


                $_collection = Mage::getResourceModel('eav/entity_attribute_option_collection')->
                    setStoreFilter(0)->setAttributeFilter($_productAttribute->getId())->load();

                foreach ($_collection->toOptionArray() as $_cur_option)
                {
                    $_option_vals[$_cur_option['value']] = array('id' => $_cur_option['value'],
                        'internal_label' => $_cur_option['label']);
                }


                $temp = new Mage_Catalog_Block_Product_View_Type_Configurable();
                $_assProducts = Mage::helper('core')->decorateArray($temp->getAllowProducts());


                $associated_options = array();
                foreach ($_assProducts as $_assProduct)
                {
                    $_option_id = $_assProduct->getData($_productAttribute->getAttributeCode());
                    if (isset($_option_vals[$_option_id]['internal_label']))
                    {
                        $_option_vals[$_option_id]['label'] = $_assProduct->getAttributeText($_productAttribute->
                            getAttributeCode());
                        array_push($associated_options, $_option_id);
                    }
                    continue;
                }

                $associated_options = array_unique($associated_options);
                sort($associated_options); //sorting is because the ID's for each option is listed in the order we want for size (SMALL, MEDIUM, LARGE, X-LARGE) (MAKE SURE OPTIONS ARE INSERTED IN THE ORDER YOU WANT THEM TO APPEAR IN THE FRONT-END WEBSITE)

                /////THIS IS THE CODE THAT CHOOSES THE DEFAULT COLOR
                echo '<script type="text/javascript">jQuery(window).load(function(){set_attribute_selected_value(' .
                    $_attribute->getAttributeId() . ', ' . $associated_options[0] . ');});</script>';
                    
                echo ''; 
                foreach ($associated_options as $associated_option)
                {
                    echo '<div class="box_attribute" onmousedown="set_attribute_selected_value(' . $_attribute->
                        getAttributeId() . ', ' . $associated_option . ');" style="" onclick="">' . $_option_vals[$associated_option]['label'] .
                        '</div>';
                }
                echo '';
                echo '</div>'; //end list of options
            //}


    endforeach;

?>

    
   <script type="text/javascript">
       
   			 var spConfig = new Product.Config(<?php

    echo $this->getJsonConfig()

?>);
   		
    	jQuery('.colorlist li div').hover(
			function(){
				jQuery(this).css(
				{'border-left': '1px solid #FF00CC'
				,'border-top': '1px solid #FF00CC'
				,'border-right': '1px solid #FF00CC'
				,'border-bottom': '1px solid #FF00CC'
				});
			}
			,
			function(){
				jQuery(this).css(
				{'border-left': '1px solid white'
				,'border-top': '1px solid white'
				,'border-right': '1px solid white'
				,'border-bottom': '1px solid white'
				}
				);
			}
			);	
		
  		jQuery('.box_attribute').hover(
			function(){
				jQuery(this).css(
				{'border-left': '1px solid #FF00CC'
				,'border-top': '1px solid #FF00CC'
				,'border-right': '1px solid #FF00CC'
				,'border-bottom': '1px solid #FF00CC'
				});
			}
			,
			function(){
				jQuery(this).css(
				{'border-left': '1px solid #A0995F'
				,'border-top': '1px solid #A0995F'
				,'border-right': '1px solid #A0995F'
				,'border-bottom': '1px solid #A0995F'
				}
				);
			}
			);	

			
		
        function set_attribute_selected_value( attribute_id, val ) {
            
            dropdown = document.getElementById('attribute' + attribute_id);
		
	   document.getElementById('current_' + attribute_id).innerHTML = attribute_id;
		

            for ( var i = 0; i < dropdown.options.length; i++ ) {
                if ( dropdown.options[i].value == val ) {
                    dropdown.selectedIndex = i;
		    document.getElementById('current_' + attribute_id).innerHTML = dropdown.options[i].text.toUpperCase();
                    break;
                }
            }

            spConfig.configureElement($('attribute' + attribute_id));
            var selectedAssocProducts = {}; // Added
            
        }
        
        
        
        
        
        

    </script>
<?php

endif;

?>